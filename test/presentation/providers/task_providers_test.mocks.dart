// Mocks generated by Mockito 5.4.6 from annotations
// in app_consware/test/presentation/providers/task_providers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app_consware/src/core/errors/failures.dart' as _i5;
import 'package:app_consware/src/domain/entities/task.dart' as _i6;
import 'package:app_consware/src/domain/usecases/add_task.dart' as _i7;
import 'package:app_consware/src/domain/usecases/delete_task.dart' as _i9;
import 'package:app_consware/src/domain/usecases/get_tasks.dart' as _i3;
import 'package:app_consware/src/domain/usecases/update_task.dart' as _i8;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetTasks].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTasks extends _i1.Mock implements _i3.GetTasks {
  MockGetTasks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Task>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>);
}

/// A class which mocks [AddTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTask extends _i1.Mock implements _i7.AddTask {
  MockAddTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> call({
    required String? title,
    bool? isCompleted = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #title: title,
              #isCompleted: isCompleted,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#call, [], {
                  #title: title,
                  #isCompleted: isCompleted,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> callWithTitle(String? title) =>
      (super.noSuchMethod(
            Invocation.method(#callWithTitle, [title]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#callWithTitle, [title]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
}

/// A class which mocks [UpdateTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTask extends _i1.Mock implements _i8.UpdateTask {
  MockUpdateTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> call(_i6.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#call, [task]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#call, [task]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> updateTitle(
    int? id,
    String? newTitle,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateTitle, [id, newTitle]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#updateTitle, [id, newTitle]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> toggleCompletion(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#toggleCompletion, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#toggleCompletion, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
}

/// A class which mocks [DeleteTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTask extends _i1.Mock implements _i9.DeleteTask {
  MockDeleteTask() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> callWithTask(_i6.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#callWithTask, [task]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#callWithTask, [task]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [MarkTaskAsCompleted].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkTaskAsCompleted extends _i1.Mock
    implements _i8.MarkTaskAsCompleted {
  MockMarkTaskAsCompleted() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
}

/// A class which mocks [MarkTaskAsPending].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkTaskAsPending extends _i1.Mock implements _i8.MarkTaskAsPending {
  MockMarkTaskAsPending() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> call(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#call, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);
}
