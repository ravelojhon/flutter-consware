// Mocks generated by Mockito 5.4.6 from annotations
// in app_consware/test/usecases/get_tasks_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app_consware/src/core/errors/failures.dart' as _i5;
import 'package:app_consware/src/domain/entities/task.dart' as _i6;
import 'package:app_consware/src/domain/repositories/task_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ITaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockITaskRepository extends _i1.Mock implements _i3.ITaskRepository {
  MockITaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>> getAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTasks, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Task>>(
                    this,
                    Invocation.method(#getAllTasks, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>
  getAllTasksOrderedByUpdated() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTasksOrderedByUpdated, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Task>>(
                    this,
                    Invocation.method(#getAllTasksOrderedByUpdated, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>> getCompletedTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getCompletedTasks, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Task>>(
                    this,
                    Invocation.method(#getCompletedTasks, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>> getPendingTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getPendingTasks, []),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Task>>(
                    this,
                    Invocation.method(#getPendingTasks, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task?>> getTaskById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTaskById, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task?>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task?>(
                this,
                Invocation.method(#getTaskById, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> createTask(_i6.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#createTask, [task]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#createTask, [task]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> createTaskWithTitle(
    String? title,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createTaskWithTitle, [title]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#createTaskWithTitle, [title]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> updateTask(_i6.Task? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#updateTask, [task]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> toggleTaskCompletion(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#toggleTaskCompletion, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#toggleTaskCompletion, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Task>> updateTaskTitle(
    int? id,
    String? newTitle,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateTaskTitle, [id, newTitle]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>.value(
              _FakeEither_0<_i5.Failure, _i6.Task>(
                this,
                Invocation.method(#updateTaskTitle, [id, newTitle]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Task>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> deleteTask(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTask, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#deleteTask, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> deleteCompletedTasks() =>
      (super.noSuchMethod(
            Invocation.method(#deleteCompletedTasks, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
              _FakeEither_0<_i5.Failure, int>(
                this,
                Invocation.method(#deleteCompletedTasks, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> deleteAllTasks() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAllTasks, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
              _FakeEither_0<_i5.Failure, int>(
                this,
                Invocation.method(#deleteAllTasks, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> getTotalTasksCount() =>
      (super.noSuchMethod(
            Invocation.method(#getTotalTasksCount, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
              _FakeEither_0<_i5.Failure, int>(
                this,
                Invocation.method(#getTotalTasksCount, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> getCompletedTasksCount() =>
      (super.noSuchMethod(
            Invocation.method(#getCompletedTasksCount, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
              _FakeEither_0<_i5.Failure, int>(
                this,
                Invocation.method(#getCompletedTasksCount, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> getPendingTasksCount() =>
      (super.noSuchMethod(
            Invocation.method(#getPendingTasksCount, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
              _FakeEither_0<_i5.Failure, int>(
                this,
                Invocation.method(#getPendingTasksCount, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> taskExists(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#taskExists, [id]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#taskExists, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>> searchTasksByTitle(
    String? query,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchTasksByTitle, [query]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Task>>(
                    this,
                    Invocation.method(#searchTasksByTitle, [query]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Task>>>);
}
